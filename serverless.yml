org: patricklouisw
app: aws-node-http-api-project
service: notes-api
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1

functions:
  createNote:
    handler: index.createNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED : 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          path: /notes
          method: post
  updateNote:
    handler: index.updateNote
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED : 1
      NOTES_TABLE_NAME: !Ref notesTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          path: /notes/{id}
          method: put
  deleteNote:
    handler: index.deleteNote
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED : 1
      NOTES_TABLE_NAME: !Ref notesTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          path: /notes/{id}
          method: delete
  getAllNotes:
    handler: index.getAllNotes
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED : 1
      NOTES_TABLE_NAME: !Ref notesTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          path: /notes
          method: get

plugins:
  - serverless-iam-roles-per-function

resources:
  Resources:
    notesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: notes
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: notesId
            AttributeType: S
        KeySchema: 
          - AttributeName: notesId
            KeyType: HASH